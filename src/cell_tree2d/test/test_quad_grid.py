#!/usr/bin/env python

"""
tests for using celltree with a quad grid

also serves as an example for how to use it with curvilear grids
"""

import numpy as np

from cell_tree2d import CellTree

def voronoi_grid():
    vertices = np.array(
        [
            [-0.08166667, 0.877],
            [-0.06966667, 0.88],
            [-0.07566667, 0.88233333],
            [-0.06266667, 0.88166667],
            [-0.04966667, 0.88333333],
            [0.01066667, 0.888],
            [-0.06, 0.88633333],
            [-0.04566667, 0.88866667],
            [-0.08933333, 0.87566667],
            [-0.03733333, 0.88633333],
            [0.016, 0.89366667],
            [0.021, 0.893],
            [-0.006, 0.89066667],
            [0.002, 0.89433333],
            [-0.03466667, 0.89566667],
            [-0.06633333, 0.90066667],
            [-0.02366667, 0.89133333],
            [-0.01633333, 0.89866667],
            [-0.061, 0.906],
            [-0.08333333, 0.90066667],
            [-0.053, 0.90266667],
            [-0.07733333, 0.90366667],
            [0.00733333, 0.9],
            [0.005, 0.90866667],
            [-0.065, 0.91466667],
            [0.028, 0.91333333],
            [0.02266667, 0.90933333],
            [-0.044, 0.90666667],
            [0.01466667, 0.91466667],
            [-0.074, 0.92266667],
            [-0.02066667, 0.915],
            [-0.04633333, 0.91766667],
            [-0.05933333, 0.92233333],
            [0.00466667, 0.92733333],
            [-0.03566667, 0.92333333],
            [-0.009, 0.91966667],
            [-0.06466667, 0.92633333],
            [-0.00566667, 0.92966667],
            [-0.04166667, 0.935],
            [-0.00933333, 0.93833333],
            [-0.017, 0.94466667],
            [-0.05466667, 0.94966667],
            [-0.031, 0.943],
            [-0.081, 0.955],
            [-0.07866667, 0.95966667],
            [-0.04066667, 0.95133333],
            [-0.03333333, 0.96],
            [-0.04, 0.96633333],
            [-0.04866667, 0.96866667],
            [-0.09366667, 0.96833333],
            [-0.08966667, 0.971],
            [-0.05833333, 0.96233333],
            [-0.067, 0.965],
            [-0.09133333, 0.97733333],
            [-0.10433333, 0.98233333],
            [-0.08066667, 0.97633333],
            [-0.08466667, 0.98233333],
            [-0.06966667, 0.977],
            [-0.099, 0.98366667],
            [-0.052, 0.98266667],
            [-0.06266667, 0.986],
            [-0.09933333, 0.988],
            [-0.09766667, 0.991],
            [-0.048, 0.98666667],
            [-0.049, 0.995],
            [-0.06666667, 0.996],
            [-0.08933333, 0.99],
            [-0.03966667, 0.996],
            [-0.10533333, 0.99666667],
            [-0.057, 1.001],
            [-0.03666667, 1.002],
            [-0.08866667, 0.99866667],
            [-0.09666667, 1.00433333],
            [-0.07, 1.00166667],
            [-0.07866667, 1.00333333],
            [-0.082, 1.01366667],
            [-0.06333333, 1.016],
            [-0.075, 1.01733333],
            [-0.05766667, 1.02],
            [-0.09033808, 0.87758482],
            [-0.08933333, 0.872],
            [-0.07665982, 0.88451826],
            [-0.06037555, 0.88914993],
            [-0.04945385, 0.8935359],
            [-0.05186486, 0.89585586],
            [-0.06711625, 0.89816133],
            [-0.08303333, 0.89856667],
            [-0.08733333, 0.89866667],
            [-0.07763333, 0.90576667],
            [-0.069, 0.91466667],
            [-0.07354667, 0.92017333],
            [-0.07596154, 0.92419231],
            [-0.06489888, 0.92877154],
            [-0.04946667, 0.9376],
            [-0.0564, 0.9462],
            [-0.05843218, 0.95301379],
            [-0.0569668, 0.95720885],
            [-0.0807439, 0.95269512],
            [-0.087, 0.955],
            [-0.0825, 0.9635],
            [-0.08511261, 0.97315766],
            [-0.0857451, 0.97001961],
            [-0.09366667, 0.965],
            [-0.097, 0.96833333],
            [-0.09467296, 0.97918868],
            [-0.09796907, 0.98134708],
            [-0.10433333, 0.98],
            [-0.10609231, 0.98333846],
            [-0.10323333, 0.9893],
            [-0.10605436, 0.99549499],
            [-0.10495967, 0.9978624],
            [-0.100392, 1.003656],
            [-0.09764359, 1.00791538],
            [-0.08851538, 1.01544359],
            [-0.075, 1.021],
            [-0.05776437, 1.02166092],
            [-0.052, 1.02],
            [-0.06204241, 1.01286489],
            [-0.06533333, 1.00633333],
            [-0.057, 1.005],
            [-0.03666667, 1.005],
            [-0.031, 1.002],
            [-0.03533333, 0.99166667],
            [-0.04286036, 0.9829955],
            [-0.04837387, 0.97759009],
            [-0.04772973, 0.97428829],
            [-0.03788839, 0.97224585],
            [-0.02424138, 0.96389655],
            [-0.01386667, 0.95093333],
            [-0.00304, 0.94305333],
            [0.00546667, 0.9276],
            [0.00620513, 0.92702564],
            [0.01379977, 0.92203527],
            [0.02983333, 0.91516667],
            [0.03234359, 0.91085128],
            [0.02514201, 0.9033925],
            [0.02297315, 0.89581879],
            [0.02360177, 0.89002655],
            [0.01121622, 0.8847027],
            [-0.0065451, 0.88358039],
            [-0.02319655, 0.88334138],
            [-0.03472165, 0.88045704],
            [-0.04998995, 0.8802621],
            [-0.0595, 0.8785],
            [-0.06966667, 0.876],
            [-0.08069072, 0.87480412],
        ]
    )

    faces = np.array(
        [
            [13, 5, 10, 22, -1, -1, -1, -1, -1],
            [27, 14, 16, 17, 30, 34, 31, -1, -1],
            [17, 12, 13, 22, 23, 35, 30, -1, -1],
            [24, 18, 20, 27, 31, 32, -1, -1, -1],
            [34, 30, 35, 37, 39, 40, 42, 38, -1],
            [66, 56, 55, 57, 60, 65, 73, 74, 71],
            [60, 59, 63, 64, 69, 65, -1, -1, -1],
            [80, 8, 79, -1, -1, -1, -1, -1, -1],
            [79, 8, 0, 2, 81, -1, -1, -1, -1],
            [2, 1, 3, 6, 82, 81, -1, -1, -1],
            [6, 4, 7, 83, 82, -1, -1, -1, -1],
            [83, 7, 9, 14, 27, 20, 84, -1, -1],
            [15, 85, 84, 20, 18, -1, -1, -1, -1],
            [86, 85, 15, 21, 19, -1, -1, -1, -1],
            [87, 86, 19, -1, -1, -1, -1, -1, -1],
            [87, 19, 21, 88, -1, -1, -1, -1, -1],
            [88, 21, 15, 18, 24, 89, -1, -1, -1],
            [89, 24, 32, 36, 29, 90, -1, -1, -1],
            [90, 29, 91, -1, -1, -1, -1, -1, -1],
            [91, 29, 36, 92, -1, -1, -1, -1, -1],
            [36, 32, 31, 34, 38, 93, 92, -1, -1],
            [93, 38, 42, 45, 41, 94, -1, -1, -1],
            [94, 41, 95, -1, -1, -1, -1, -1, -1],
            [96, 95, 41, 45, 46, 47, 48, 51, -1],
            [43, 97, 96, 51, 52, 44, -1, -1, -1],
            [97, 43, 98, -1, -1, -1, -1, -1, -1],
            [98, 43, 44, 99, -1, -1, -1, -1, -1],
            [99, 44, 52, 57, 55, 100, -1, -1, -1],
            [50, 101, 100, 55, 56, 53, -1, -1, -1],
            [49, 102, 101, 50, -1, -1, -1, -1, -1],
            [102, 49, 103, -1, -1, -1, -1, -1, -1],
            [103, 49, 50, 53, 104, -1, -1, -1, -1],
            [58, 105, 104, 53, 56, 66, 62, 61, -1],
            [106, 105, 58, 54, -1, -1, -1, -1, -1],
            [106, 54, 107, -1, -1, -1, -1, -1, -1],
            [107, 54, 58, 61, 108, -1, -1, -1, -1],
            [108, 61, 62, 68, 109, -1, -1, -1, -1],
            [109, 68, 110, -1, -1, -1, -1, -1, -1],
            [68, 62, 66, 71, 72, 111, 110, -1, -1],
            [111, 72, 112, -1, -1, -1, -1, -1, -1],
            [72, 71, 74, 75, 113, 112, -1, -1, -1],
            [113, 75, 77, 114, -1, -1, -1, -1, -1],
            [77, 76, 78, 115, 114, -1, -1, -1, -1],
            [78, 116, 115, -1, -1, -1, -1, -1, -1],
            [76, 117, 116, 78, -1, -1, -1, -1, -1],
            [74, 73, 118, 117, 76, 77, 75, -1, -1],
            [73, 65, 69, 119, 118, -1, -1, -1, -1],
            [64, 67, 70, 120, 119, 69, -1, -1, -1],
            [70, 121, 120, -1, -1, -1, -1, -1, -1],
            [67, 122, 121, 70, -1, -1, -1, -1, -1],
            [63, 123, 122, 67, 64, -1, -1, -1, -1],
            [124, 123, 63, 59, -1, -1, -1, -1, -1],
            [52, 51, 48, 125, 124, 59, 60, 57, -1],
            [48, 47, 126, 125, -1, -1, -1, -1, -1],
            [46, 127, 126, 47, -1, -1, -1, -1, -1],
            [45, 42, 40, 128, 127, 46, -1, -1, -1],
            [39, 129, 128, 40, -1, -1, -1, -1, -1],
            [37, 33, 130, 129, 39, -1, -1, -1, -1],
            [131, 130, 33, -1, -1, -1, -1, -1, -1],
            [35, 23, 28, 132, 131, 33, 37, -1, -1],
            [28, 26, 25, 133, 132, -1, -1, -1, -1],
            [134, 133, 25, -1, -1, -1, -1, -1, -1],
            [135, 134, 25, 26, -1, -1, -1, -1, -1],
            [22, 10, 11, 136, 135, 26, 28, 23, -1],
            [137, 136, 11, -1, -1, -1, -1, -1, -1],
            [5, 138, 137, 11, 10, -1, -1, -1, -1],
            [139, 138, 5, 13, 12, -1, -1, -1, -1],
            [140, 139, 12, 17, 16, -1, -1, -1, -1],
            [9, 141, 140, 16, 14, -1, -1, -1, -1],
            [4, 142, 141, 9, 7, -1, -1, -1, -1],
            [3, 143, 142, 4, 6, -1, -1, -1, -1],
            [144, 143, 3, 1, -1, -1, -1, -1, -1],
            [0, 145, 144, 1, 2, -1, -1, -1, -1],
            [80, 145, 0, 8, -1, -1, -1, -1, -1],
        ]
    )
    return vertices, faces

def curv_grid(n_x=4,
              n_y=12,
              center=(20.0, 30.0),
              min_radius=1.0,
              max_radius=1.1,
              angle=np.pi / 2.0):
    """
    example of quad grid of a partial circle to use for tests
    """
    n_x += 1
    n_y += 1  # to give specified number of cells
    lon = np.zeros((n_y, n_x), dtype=np.float64)
    lat = np.zeros((n_y, n_x), dtype=np.float64)

    for i, theta in enumerate(np.linspace(0, angle, n_x)):
        for j, r in enumerate(np.linspace(min_radius, max_radius, n_y)):
            lon[j, i] = center[1] + r * np.cos(theta)
            lat[j, i] = center[0] + r * np.sin(theta)
    return lon, lat


def nodes_from_coords(x, y):
    """
    generates nodes and indeces for the cells from arrays of x and y nodes_from_coords
    """
    nodes = np.ascontiguousarray(np.column_stack((x[:].reshape(-1),
                                                  y[:].reshape(-1)))).astype(np.float64)
    y_size, x_size = x.shape
    faces = np.array([np.array([[x, x + 1, x + x_size + 1, x + x_size]
                                for x in range(0, x_size - 1, 1)]) + y * x_size for y in range(0, y_size - 1)])
    faces = np.ascontiguousarray(faces.reshape(-1, 4).astype(np.int32))

    return nodes, faces


def test_build_tree_from_coords():
    """
    this tests using a structured grid with cell coordinates

    converting it to a flattened grid with nodes and cells
    defined as indexes to those nodes

    as much as anything else, this serves as example code for how to do that.
    """

    x, y = curv_grid(n_x=3,
                     n_y=3,
                     center=(0.0, 0.0),
                     min_radius=9.0,
                     max_radius=18.0,
                     angle=np.pi / 4.0
                     )

    nodes, faces = nodes_from_coords(x, y)
    # these range from (30.,  20.) to (31.1,  21.1)

    tree = CellTree(nodes, faces)

    # try to find some points

    # points outside the domain:
    result = tree.locate([(0.0, 0.0),
                          (19.0, 5.0),
                          (17.0, -1.0),
                          (9.0, 10.0),
                          ],
                         )
    assert np.all(result == -1)

    # points inside the domain
    result = tree.locate([(10.0, 1.0),
                          (9.0, 3.0),
                          (8.0, 6.0),
                          (13.0, 1.0),
                          (12.0, 4.0),
                          (11.0, 7.0),
                          (16.0, 1.0),
                          (15.0, 8.0),
                          (13.0, 11.0),
                          ]
                         )

    assert np.array_equal(result, [0, 1, 2, 3, 4, 5, 6, 7, 8])

def test_voronoi_grid():
    nodes, faces = voronoi_grid()
    tree = CellTree(nodes, faces)
    result = tree.locate([[-0.02, 0.90]])
    assert np.array_equal(result, [1,])

if __name__ == "__main__":

    test_build_tree_from_coords()
